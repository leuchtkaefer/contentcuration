<?xml version="1.0" ?>
<!-- Configuration of the Ant build system to generate a Jar file --> 
<!--<project name="FreenetRef" default="CreateJar">
  <target name="CreateJar" description="Create Jar file">
        <jar jarfile="HelloWorld.jar" basedir="." includes="*.class" />
  </target>
</project>
-->


<project name="CCur" basedir="." default="main">
	
	<property file="override.properties"/>
	  <presetdef name="javac"> 
	    <javac includeantruntime="false" />
	  </presetdef>
	
    <property name="src.dir"    value="src"/>
    <property name="build.dir"  value="build"/>
	<property name="dist.dir" value="dist"/>
    <property name="classes.dir" value="${build.dir}/classes"/>

	
	<property name="freenet-cvs-snapshot.location" location="../../fred-staging/dist/freenet.jar"/>
	<property name="freenet-ext.location" location="../../fred-staging/lib/freenet/freenet-ext.jar"/>
	<property name="version.src" value="plugins/ccuration/Version.java" />
	<property name="version.build" value="plugins/ccuration/Version.class" />
	<available file="${src.dir}/${version.src}" property="version.present" />
	
	<property name="source-version" value="1.6"/>
	<property name="target-version" value="1.6"/>
	

   <property name="packagebase" value="plugins.ccuration" />

	<path id="lib.path">
		<pathelement location="${freenet-ext.location}"/>
		<pathelement location="${freenet-cvs-snapshot.location}"/>
	</path>

	<!-- Originally from Library's build script -->
	<exec executable="git"
		failifexecutionfails="false"
		errorProperty="git.errror"
		outputproperty="git.describe"
		resultproperty="git.result">
		<arg value="describe" />
		<arg value="--always" />
		<arg value="--abbrev=7" />
		<arg value="--dirty" />
	</exec>
	<condition property="git.revision" value="${git.describe}" else="@unknown@">
		<and>
			<equals arg1="${git.result}" arg2="0" />
			<isset property="git.describe" />
		</and>
	</condition>
	
    <target name="clean">
        <delete dir="${build.dir}"/>
    	<delete dir="${dist.dir}"/>
    </target>

	<target name="mkdir">
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${dist.dir}"/>
		<mkdir dir="${classes.dir}"/>
		<echo message="Using ${freenet-cvs-snapshot.location} as freenet-cvs-snapshot.jar"/>
		<echo message="Using ${freenet-ext.location} as freenet-ext.jar"/>
	</target>
	
    <target name="compile" depends="mkdir">
    	<!-- Create the time stamp -->
    	<tstamp/>
    	
    	<!-- Create the Version file with patched revision number in ${build.dir} -->
    	<copy file="${src.dir}/${version.src}" tofile="${build.dir}/${version.src}" overwrite="true" />
    	<delete file="${build.dir}/${version.build}" quiet="true" />
    	<replace file="${build.dir}/${version.src}">
    	<replacefilter token="@custom@" value="${git.revision}"/>
    	</replace>
    	<echo message="Updated build version to ${git.revision} in ${build.dir}/${version.src}"/>

		<!-- Force compile of Version.java in case compile of ${src.dir} didn't trigger it -->
		<javac srcdir="${build.dir}" destdir="${build.dir}" debug="on" optimize="on" source="${source-version}" target="${target-version}">
			<classpath>
				<pathelement location="${freenet-ext.location}"/>
				<pathelement location="${freenet-cvs-snapshot.location}"/>
			</classpath>
			<include name="${version.src}"/>
		</javac>
    	
		<!-- FIXME: remove the debug and replace with optimize -->
		<javac srcdir="${src.dir}" destdir="${build.dir}" debug="on" optimize="on" source="${source-version}" target="${target-version}">
			<classpath>
				<pathelement location="${freenet-ext.location}"/>
				<pathelement location="${freenet-cvs-snapshot.location}"/>
			</classpath>
			<include name="**/*.java"/>
			<exclude name="**/package-info.java"/>
			<exclude name="${version.src}"/>
		</javac>
    	    	
		<copy todir="${build.dir}">
			<fileset dir="src/">
				<include name="**/*.l10n" />
			</fileset>
		</copy>
    </target>
  	
    <target name="dist" depends="compile">
        <mkdir dir="${dist.dir}"/>
        <jar jarfile="${dist.dir}/${ant.project.name}.jar" basedir="${build.dir}" duplicate="fail">
			<manifest>
				<attribute name="Main-Class" value="${packagebase}.ContentCuration"/>
				<attribute name="Plugin-Main-Class" value="${packagebase}.ContentCuration"/>
				<attribute name="Required-Node-Version" value="${minNodeVersion}"/>
			</manifest>
        	 	
			<exclude name="${version.src}"/>
        </jar>
    </target>

    <target name="run" depends="dist">
        <java jar="${jar.dir}/${ant.project.name}.jar" fork="true"/>
    </target>

    <target name="clean-build" depends="clean,dist"/>

    <target name="main" depends="clean,run"/>

</project>